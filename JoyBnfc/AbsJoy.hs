

module AbsJoy where

-- Haskell module generated by the BNF converter




newtype CharacterConstant = CharacterConstant String
  deriving (Eq, Ord, Show, Read)
newtype AtomicSymbol = AtomicSymbol String
  deriving (Eq, Ord, Show, Read)
newtype IntegerConstant = IntegerConstant String
  deriving (Eq, Ord, Show, Read)
newtype FloatConstant = FloatConstant String
  deriving (Eq, Ord, Show, Read)
data JoyFile = JoyFile [Cycle]
  deriving (Eq, Ord, Show, Read)

data ReservedCharacter
    = ReservedCharacter1
    | ReservedCharacter2
    | ReservedCharacter3
    | ReservedCharacter4
    | ReservedCharacter5
    | ReservedCharacter6
  deriving (Eq, Ord, Show, Read)

data ReservedWord
    = ReservedWord1
    | ReservedWord_MODULE
    | ReservedWord_PRIVATE
    | ReservedWord_PUBLIC
    | ReservedWord_END
    | ReservedWord_HIDE
    | ReservedWord_IN
    | ReservedWord_DEFINE
    | ReservedWord_LIBRA
  deriving (Eq, Ord, Show, Read)

data Factor
    = FactorAtomicSymbol AtomicSymbol
    | FactorIntegerConstant IntegerConstant
    | FactorFloatConstant FloatConstant
    | FactorCharacterConstant CharacterConstant
    | FactorString String
    | Factor1 [IntOrCharConstant]
    | Factor2 [Factor]
  deriving (Eq, Ord, Show, Read)

data IntOrCharConstant
    = IntOrCharConstantIntegerConstant IntegerConstant
    | IntOrCharConstantCharacterConstant CharacterConstant
  deriving (Eq, Ord, Show, Read)

data Literal = Literal_true | Literal_false | Literal1 [Factor]
  deriving (Eq, Ord, Show, Read)

data Definition
    = SimpleDef SimpleDefinition | CompoundDef CompoundDefinition
  deriving (Eq, Ord, Show, Read)

data SimpleDefinition = SimpleDefinition AtomicSymbol Literal
  deriving (Eq, Ord, Show, Read)

data CompoundDefinition
    = CompoundDefinition MaybeModule MaybePrivate MaybePublic PossibleEndings
  deriving (Eq, Ord, Show, Read)

data PossibleEndings = PeriodEnd | EndEnd
  deriving (Eq, Ord, Show, Read)

data MaybeModule = Module AtomicSymbol | NoModule
  deriving (Eq, Ord, Show, Read)

data MaybePrivate = Private [Definition] | NoPrivate
  deriving (Eq, Ord, Show, Read)

data MaybePublic = Public PublicEQ [Definition] | NoPublic
  deriving (Eq, Ord, Show, Read)

data PublicEQ = PublicEQ_DEFINE | PublicEQ_LIBRA | PublicEQ_PUBLIC
  deriving (Eq, Ord, Show, Read)

data Cycle
    = DefCycle CompoundDefinition
    | FactorCycle [Factor] PossibleEndings
  deriving (Eq, Ord, Show, Read)

