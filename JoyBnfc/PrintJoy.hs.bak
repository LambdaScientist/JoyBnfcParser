{-# OPTIONS_GHC -fno-warn-incomplete-patterns #-}
module PrintJoy where

-- pretty-printer generated by the BNF converter

import AbsJoy
import Data.Char


-- the top-level printing method
printTree :: Print a => a -> String
printTree = render . prt 0

type Doc = [ShowS] -> [ShowS]

doc :: ShowS -> Doc
doc = (:)

render :: Doc -> String
render d = rend 0 (map ($ "") $ d []) "" where
  rend i ss = case ss of
    "["      :ts -> showChar '[' . rend i ts
    "("      :ts -> showChar '(' . rend i ts
    "{"      :ts -> showChar '{' . new (i+1) . rend (i+1) ts
    "}" : ";":ts -> new (i-1) . space "}" . showChar ';' . new (i-1) . rend (i-1) ts
    "}"      :ts -> new (i-1) . showChar '}' . new (i-1) . rend (i-1) ts
    ";"      :ts -> showChar ';' . new i . rend i ts
    t  : "," :ts -> showString t . space "," . rend i ts
    t  : ")" :ts -> showString t . showChar ')' . rend i ts
    t  : "]" :ts -> showString t . showChar ']' . rend i ts
    t        :ts -> space t . rend i ts
    _            -> id
  new i   = showChar '\n' . replicateS (2*i) (showChar ' ') . dropWhile isSpace
  space t = showString t . (\s -> if null s then "" else (' ':s))

parenth :: Doc -> Doc
parenth ss = doc (showChar '(') . ss . doc (showChar ')')

concatS :: [ShowS] -> ShowS
concatS = foldr (.) id

concatD :: [Doc] -> Doc
concatD = foldr (.) id

replicateS :: Int -> ShowS -> ShowS
replicateS n f = concatS (replicate n f)

-- the printer class does the job
class Print a where
  prt :: Int -> a -> Doc
  prtList :: Int -> [a] -> Doc
  prtList i = concatD . map (prt i)

instance Print a => Print [a] where
  prt = prtList

instance Print Char where
  prt _ s = doc (showChar '\'' . mkEsc '\'' s . showChar '\'')
  prtList _ s = doc (showChar '"' . concatS (map (mkEsc '"') s) . showChar '"')

mkEsc :: Char -> Char -> ShowS
mkEsc q s = case s of
  _ | s == q -> showChar '\\' . showChar s
  '\\'-> showString "\\\\"
  '\n' -> showString "\\n"
  '\t' -> showString "\\t"
  _ -> showChar s

prPrec :: Int -> Int -> Doc -> Doc
prPrec i j = if j<i then parenth else id


instance Print Integer where
  prt _ x = doc (shows x)


instance Print Double where
  prt _ x = doc (shows x)



instance Print CharacterConstant where
  prt _ (CharacterConstant i) = doc (showString ( i))


instance Print AtomicSymbol where
  prt _ (AtomicSymbol i) = doc (showString ( i))



instance Print JoyFile where
  prt i e = case e of
    JoyFile cycles -> prPrec i 0 (concatD [prt 0 cycles])

instance Print ReservedCharacter where
  prt i e = case e of
    ReservedCharacter1 -> prPrec i 0 (concatD [doc (showString "[")])
    ReservedCharacter2 -> prPrec i 0 (concatD [doc (showString "]")])
    ReservedCharacter3 -> prPrec i 0 (concatD [doc (showString "{")])
    ReservedCharacter4 -> prPrec i 0 (concatD [doc (showString "}")])
    ReservedCharacter5 -> prPrec i 0 (concatD [doc (showString ";")])
    ReservedCharacter6 -> prPrec i 0 (concatD [doc (showString ".")])

instance Print IntegerConstant where
  prt i e = case e of
    IntegerConstant1 n -> prPrec i 0 (concatD [doc (showString "-"), prt 0 n])
    IntegerConstantInteger n -> prPrec i 0 (concatD [prt 0 n])

instance Print FloatConstant where
  prt i e = case e of
    FloatConstant1 d -> prPrec i 0 (concatD [doc (showString "-"), prt 0 d])
    FloatConstantDouble d -> prPrec i 0 (concatD [prt 0 d])

instance Print ReservedWord where
  prt i e = case e of
    ReservedWord1 -> prPrec i 0 (concatD [doc (showString "==")])
    ReservedWord_MODULE -> prPrec i 0 (concatD [doc (showString "MODULE")])
    ReservedWord_PRIVATE -> prPrec i 0 (concatD [doc (showString "PRIVATE")])
    ReservedWord_PUBLIC -> prPrec i 0 (concatD [doc (showString "PUBLIC")])
    ReservedWord_END -> prPrec i 0 (concatD [doc (showString "END")])
    ReservedWord_HIDE -> prPrec i 0 (concatD [doc (showString "HIDE")])
    ReservedWord_IN -> prPrec i 0 (concatD [doc (showString "IN")])
    ReservedWord_DEFINE -> prPrec i 0 (concatD [doc (showString "DEFINE")])
    ReservedWord_LIBRA -> prPrec i 0 (concatD [doc (showString "LIBRA")])

instance Print Factor where
  prt i e = case e of
    FactorAtomicSymbol atomicsymbol -> prPrec i 0 (concatD [prt 0 atomicsymbol])
    FactorIntegerConstant integerconstant -> prPrec i 0 (concatD [prt 0 integerconstant])
    FactorFloatConstant floatconstant -> prPrec i 0 (concatD [prt 0 floatconstant])
    FactorCharacterConstant characterconstant -> prPrec i 0 (concatD [prt 0 characterconstant])
    FactorString str -> prPrec i 0 (concatD [prt 0 str])
    Factor1 intorcharconstants -> prPrec i 0 (concatD [doc (showString "{"), prt 0 intorcharconstants, doc (showString "}")])
    Factor2 factors -> prPrec i 0 (concatD [doc (showString "["), prt 0 factors, doc (showString "]")])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])
instance Print IntOrCharConstant where
  prt i e = case e of
    IntOrCharConstantIntegerConstant integerconstant -> prPrec i 0 (concatD [prt 0 integerconstant])
    IntOrCharConstantCharacterConstant characterconstant -> prPrec i 0 (concatD [prt 0 characterconstant])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])
instance Print Literal where
  prt i e = case e of
    Literal_true -> prPrec i 0 (concatD [doc (showString "true")])
    Literal_false -> prPrec i 0 (concatD [doc (showString "false")])
    Literal1 factors -> prPrec i 0 (concatD [prt 0 factors])

instance Print Definition where
  prt i e = case e of
    SimpleDef simpledefinition -> prPrec i 0 (concatD [prt 0 simpledefinition])
    CompoundDef compounddefinition -> prPrec i 0 (concatD [prt 0 compounddefinition])
  prtList _ [] = (concatD [])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ";"), prt 0 xs])
instance Print SimpleDefinition where
  prt i e = case e of
    SimpleDefinition atomicsymbol literal -> prPrec i 0 (concatD [prt 0 atomicsymbol, doc (showString "=="), prt 0 literal])

instance Print CompoundDefinition where
  prt i e = case e of
    CompoundDefinition maybemodule maybeprivate maybepublic possibleendings -> prPrec i 0 (concatD [prt 0 maybemodule, prt 0 maybeprivate, prt 0 maybepublic, prt 0 possibleendings])

instance Print PossibleEndings where
  prt i e = case e of
    PeriodEnd -> prPrec i 0 (concatD [doc (showString ".")])
    EndEnd -> prPrec i 0 (concatD [doc (showString "END")])

instance Print MaybeModule where
  prt i e = case e of
    Module atomicsymbol -> prPrec i 0 (concatD [doc (showString "MODULE"), prt 0 atomicsymbol])
    NoModule -> prPrec i 0 (concatD [])

instance Print MaybePrivate where
  prt i e = case e of
    Private definitions -> prPrec i 0 (concatD [doc (showString "PRIVATE"), prt 0 definitions])
    NoPrivate -> prPrec i 0 (concatD [])

instance Print MaybePublic where
  prt i e = case e of
    Public publiceq definitions -> prPrec i 0 (concatD [prt 0 publiceq, prt 0 definitions])
    NoPublic -> prPrec i 0 (concatD [])

instance Print PublicEQ where
  prt i e = case e of
    PublicEQ_DEFINE -> prPrec i 0 (concatD [doc (showString "DEFINE")])
    PublicEQ_LIBRA -> prPrec i 0 (concatD [doc (showString "LIBRA")])
    PublicEQ_PUBLIC -> prPrec i 0 (concatD [doc (showString "PUBLIC")])

instance Print Cycle where
  prt i e = case e of
    DefCycle compounddefinition -> prPrec i 0 (concatD [prt 0 compounddefinition])
    FactorCycle factors possibleendings -> prPrec i 0 (concatD [prt 0 factors, prt 0 possibleendings])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])

